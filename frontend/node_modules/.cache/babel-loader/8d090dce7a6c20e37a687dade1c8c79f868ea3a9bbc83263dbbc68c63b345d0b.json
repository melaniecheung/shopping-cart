{"ast":null,"code":"var _jsxFileName = \"/Users/melaniecheung/Desktop/shopping-cart/frontend/src/components/CartContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nconst CartProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [cart, setCart] = useState([]);\n  const [amount, setAmount] = useState(0);\n  const [total, setTotal] = useState(0);\n  useEffect(() => {\n    const total = cart.reduce((accumulator, currentItem) => {\n      return accumulator + currentItem.new_price * currentItem.amount;\n    }, 0);\n    setTotal(total);\n  });\n  useEffect(() => {\n    if (cart) {\n      const cartAmount = cart.reduce((accumulator, currentItem) => {\n        return accumulator + currentItem.amount;\n      }, 0);\n      setAmount(cartAmount);\n    }\n  }, [cart]);\n\n  // const addToCart = (product, id) => {\n  //     const newItem = { ... product, amount: 1 };\n  //     const cartItem = cart.find(item => {\n  //         return item.id === id;\n  //     });\n  //     if (cartItem) {\n  //         const newCart = [...cart].map(item => {\n  //             if (item.id === id) {\n  //                 return {...item, amount: cartItem.amount + 1};\n  //             } else {\n  //                 return item;\n  //             }\n  //         });\n  //         setCart(newCart);\n  //     } else {\n  //         setCart([...cart, newItem]);\n  //     }\n  // };\n\n  const addToCart = async (product, id) => {\n    try {\n      // Assuming you have a function to get the current user's token\n      const token = getCurrentUserToken();\n      const response = await fetch('http://localhost:4000/addtocart', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': token // Send the token for authentication\n        },\n\n        body: JSON.stringify({\n          itemId: id\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        console.log(\"Item added to cart\");\n      } else {\n        console.error(\"Failed to add item to cart\");\n      }\n    } catch (error) {\n      console.error(\"Error adding item to cart:\", error);\n    }\n  };\n\n  // const addToCart = async (product, id) => {\n  //     const newItem = { ...product, amount: 1 };\n  //     const cartItem = cart.find(item => item.id === id);\n\n  //     try {\n  //         let updatedCart;\n  //         if (cartItem) {\n  //             updatedCart = cart.map(item => {\n  //                 if (item.id === id) {\n  //                     return { ...item, amount: cartItem.amount + 1 };\n  //                 } else {\n  //                     return item;\n  //                 }\n  //             });\n  //         } else {\n  //             updatedCart = [...cart, newItem];\n  //         }\n\n  //         const response = await fetch('/addtocart', {\n  //             method: 'POST',\n  //             headers: {\n  //                 'Content-Type': 'application/json',\n  //             },\n  //             body: JSON.stringify({ cart: updatedCart, itemId: id }),\n  //         });\n\n  //         if (!response.ok) {\n  //             throw new Error('Error adding item to cart');\n  //         }\n\n  //         // Update the cart state here, if necessary\n  //         setCart(updatedCart);\n  //     } catch (error) {\n  //         console.error('Error:', error);\n  //     }\n  // };\n\n  // const addToCart = async (product, id) => {\n  //     const newItem = { ...product, amount: 1 };\n  //     const cartItem = cart.find(item => item.id === id);\n\n  //     if (cartItem) {\n  //         const newCart = cart.map(item => item.id === id ? {...item, amount: cartItem.amount + 1} : item);\n  //         setCart(newCart);\n  //         await updateCartBackend(newCart);\n  //     } else {\n  //         const updatedCart = [...cart, newItem];\n  //         setCart(updatedCart);\n  //         await updateCartBackend(updatedCart);\n  //     }\n  // };\n\n  // const updateCartBackend = async (cart) => {\n  //     try {\n  //         const response = await fetch('/addtocart', {\n  //             method: 'POST',\n  //             headers: { 'Content-Type': 'application/json' },\n  //             body: JSON.stringify(cart)\n  //         });\n\n  //         if (response.ok) {\n  //             console.log('Cart updated successfully');\n  //         } else {\n  //             throw new Error('Failed to update cart');\n  //         }\n  //     } catch (error) {\n  //         console.error('Error updating cart:', error);\n  //     }\n  // };\n\n  // CartContext.jsx in frontend folder\n\n  // const addToCart = (product, id) => {\n  //     const newItem = { ... product, amount: 1 };\n  //     const cartItem = cart.find(item => {\n  //         return item.id === id;\n  //     });\n  //     // Make a POST request to the /addtocart endpoint with the newItem data\n  //     fetch('/addtocart', {\n  //         method: 'POST',\n  //         headers: {\n  //             'Content-Type': 'application/json',\n  //         },\n  //         body: JSON.stringify({ product: newItem }),\n  //     })\n  //     .then(response => {\n  //         if (response.status === 200) {\n  //             const newCart = [...cart].map(item => {\n  //                 if (item.id === id) {\n  //                     return {...item, amount: cartItem.amount + 1};\n  //                 } else {\n  //                     return item;\n  //                 }\n  //             });\n  //             setCart(newCart);\n  //         }\n  //     })\n  //     .catch(error => {\n  //         // Handle network errors\n  //     });\n  // }\n\n  const removeFromCart = id => {\n    const newCart = cart.filter(item => {\n      return item.id !== id;\n    });\n    setCart(newCart);\n  };\n  const increaseAmount = id => {\n    const cartItem = cart.find(item => item.id === id);\n    addToCart(cartItem, id);\n  };\n  const decreaseAmount = id => {\n    const cartItem = cart.find(item => {\n      return item.id === id;\n    });\n    if (cartItem) {\n      const newCart = cart.map(item => {\n        if (item.id === id) {\n          return {\n            ...item,\n            amount: cartItem.amount - 1\n          };\n        } else {\n          return item;\n        }\n      });\n      setCart(newCart);\n    }\n    if (cartItem.amount < 2) {\n      removeFromCart(id);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addToCart,\n      removeFromCart,\n      increaseAmount,\n      decreaseAmount,\n      amount,\n      total\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 9\n  }, this);\n};\n_s(CartProvider, \"mFZFjSRtmLVb18GUQ+3dORROan0=\");\n_c = CartProvider;\nexport default CartProvider;\n\n// import { createContext, useState, useEffect } from \"react\";\n\n// export const CartContext = createContext();\n\n// const CartProvider = (props) => {\n\n//     useEffect(() => {\n//         const total = cart.reduce((accumulator, currentItem) => {\n//             return accumulator + currentItem.new_price * currentItem.amount\n//         }, 0);\n//         setTotal(total);\n//     });\n\n//     const [total, setTotal] = useState(0);\n//     const getDefaultCart = () => {\n//         let cart = {};\n//         for (let i = 0; i < 300; i++) {\n//           cart[i] = 0;\n//         }\n//         return cart;\n//       };\n\n//     const [cartItems, setCartItems] = useState(getDefaultCart());\n\n//     const addToCart = (itemId) => {\n//         setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] + 1 }));\n//         if(localStorage.getItem(\"auth-token\"))\n//         {\n//         fetch('http://localhost:4000/addtocart', {\n//         method: 'POST',\n//         headers: {\n//             Accept:'application/form-data',\n//             'auth-token':`${localStorage.getItem(\"auth-token\")}`,\n//             'Content-Type':'application/json',\n//         },\n//         body: JSON.stringify({\"itemId\":itemId}),\n//         })\n//         .then((resp) => resp.json())\n//         .then((data) => {console.log(data)});\n//         }\n//     };\n\n//     const removeFromCart = (itemId) => {\n//         setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] - 1 }));\n//     }\n\n//     const getTotalCartItems = () => {\n//     let totalItem = 0;\n//     for (const item in cartItems) {\n//         if (cartItems[item] > 0) {\n//         totalItem += cartItems[item];;\n//         }\n//     }\n//     return totalItem;\n//     };\n\n//     const contextValue = {getTotalCartItems, cartItems, addToCart, removeFromCart, total };\n//     return (\n//       <CartContext.Provider value={contextValue}>\n//         {props.children}\n//       </CartContext.Provider>\n//     );\n// }\n\n// export default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","CartProvider","_ref","_s","children","cart","setCart","amount","setAmount","total","setTotal","reduce","accumulator","currentItem","new_price","cartAmount","addToCart","product","id","token","getCurrentUserToken","response","fetch","method","headers","body","JSON","stringify","itemId","data","json","success","console","log","error","removeFromCart","newCart","filter","item","increaseAmount","cartItem","find","decreaseAmount","map","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/melaniecheung/Desktop/shopping-cart/frontend/src/components/CartContext.jsx"],"sourcesContent":["import { createContext, useState, useEffect } from \"react\";\n\nexport const CartContext = createContext();\n\nconst CartProvider = ({ children }) => {\n    const [cart, setCart] = useState([]);\n    const [amount, setAmount] = useState(0);\n    const [total, setTotal] = useState(0);\n\n    useEffect(() => {\n        const total = cart.reduce((accumulator, currentItem) => {\n            return accumulator + currentItem.new_price * currentItem.amount\n        }, 0);\n        setTotal(total);\n    });\n\n    useEffect(() => {\n        if (cart) {\n            const cartAmount = cart.reduce((accumulator, currentItem) => {\n                return accumulator + currentItem.amount;\n            }, 0);\n            setAmount(cartAmount);\n        }\n    }, [cart]);\n\n    // const addToCart = (product, id) => {\n    //     const newItem = { ... product, amount: 1 };\n    //     const cartItem = cart.find(item => {\n    //         return item.id === id;\n    //     });\n    //     if (cartItem) {\n    //         const newCart = [...cart].map(item => {\n    //             if (item.id === id) {\n    //                 return {...item, amount: cartItem.amount + 1};\n    //             } else {\n    //                 return item;\n    //             }\n    //         });\n    //         setCart(newCart);\n    //     } else {\n    //         setCart([...cart, newItem]);\n    //     }\n    // };\n\n    const addToCart = async (product, id) => {\n        try {\n            // Assuming you have a function to get the current user's token\n            const token = getCurrentUserToken(); \n    \n            const response = await fetch('http://localhost:4000/addtocart', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'auth-token': token // Send the token for authentication\n                },\n                body: JSON.stringify({ itemId: id })\n            });\n    \n            const data = await response.json();\n            if (data.success) {\n                console.log(\"Item added to cart\");\n            } else {\n                console.error(\"Failed to add item to cart\");\n            }\n        } catch (error) {\n            console.error(\"Error adding item to cart:\", error);\n        }\n    };\n    \n\n\n    // const addToCart = async (product, id) => {\n    //     const newItem = { ...product, amount: 1 };\n    //     const cartItem = cart.find(item => item.id === id);\n    \n    //     try {\n    //         let updatedCart;\n    //         if (cartItem) {\n    //             updatedCart = cart.map(item => {\n    //                 if (item.id === id) {\n    //                     return { ...item, amount: cartItem.amount + 1 };\n    //                 } else {\n    //                     return item;\n    //                 }\n    //             });\n    //         } else {\n    //             updatedCart = [...cart, newItem];\n    //         }\n    \n    //         const response = await fetch('/addtocart', {\n    //             method: 'POST',\n    //             headers: {\n    //                 'Content-Type': 'application/json',\n    //             },\n    //             body: JSON.stringify({ cart: updatedCart, itemId: id }),\n    //         });\n    \n    //         if (!response.ok) {\n    //             throw new Error('Error adding item to cart');\n    //         }\n    \n    //         // Update the cart state here, if necessary\n    //         setCart(updatedCart);\n    //     } catch (error) {\n    //         console.error('Error:', error);\n    //     }\n    // };\n    \n    // const addToCart = async (product, id) => {\n    //     const newItem = { ...product, amount: 1 };\n    //     const cartItem = cart.find(item => item.id === id);\n    \n    //     if (cartItem) {\n    //         const newCart = cart.map(item => item.id === id ? {...item, amount: cartItem.amount + 1} : item);\n    //         setCart(newCart);\n    //         await updateCartBackend(newCart);\n    //     } else {\n    //         const updatedCart = [...cart, newItem];\n    //         setCart(updatedCart);\n    //         await updateCartBackend(updatedCart);\n    //     }\n    // };\n    \n    // const updateCartBackend = async (cart) => {\n    //     try {\n    //         const response = await fetch('/addtocart', {\n    //             method: 'POST',\n    //             headers: { 'Content-Type': 'application/json' },\n    //             body: JSON.stringify(cart)\n    //         });\n            \n    //         if (response.ok) {\n    //             console.log('Cart updated successfully');\n    //         } else {\n    //             throw new Error('Failed to update cart');\n    //         }\n    //     } catch (error) {\n    //         console.error('Error updating cart:', error);\n    //     }\n    // };\n    \n    // CartContext.jsx in frontend folder\n\n\n\n    // const addToCart = (product, id) => {\n    //     const newItem = { ... product, amount: 1 };\n    //     const cartItem = cart.find(item => {\n    //         return item.id === id;\n    //     });\n    //     // Make a POST request to the /addtocart endpoint with the newItem data\n    //     fetch('/addtocart', {\n    //         method: 'POST',\n    //         headers: {\n    //             'Content-Type': 'application/json',\n    //         },\n    //         body: JSON.stringify({ product: newItem }),\n    //     })\n    //     .then(response => {\n    //         if (response.status === 200) {\n    //             const newCart = [...cart].map(item => {\n    //                 if (item.id === id) {\n    //                     return {...item, amount: cartItem.amount + 1};\n    //                 } else {\n    //                     return item;\n    //                 }\n    //             });\n    //             setCart(newCart);\n    //         }\n    //     })\n    //     .catch(error => {\n    //         // Handle network errors\n    //     });\n    // }\n\n\n    const removeFromCart = (id) => {\n        const newCart = cart.filter(item => {\n            return item.id !== id;\n        });\n        setCart(newCart);\n    };\n\n    const increaseAmount = (id) => {\n        const cartItem = cart.find(item => item.id === id);\n        addToCart(cartItem, id);\n    }\n    \n    const decreaseAmount = (id) => {\n        const cartItem = cart.find((item) => {\n            return item.id === id;\n        });\n        if (cartItem) {\n            const newCart = cart.map(item => {\n                if (item.id === id) {\n                    return {...item, amount: cartItem.amount - 1 };\n                } else {\n                    return item;\n                }\n            });\n            setCart(newCart);\n        } if (cartItem.amount < 2) {\n            removeFromCart(id);\n        }\n    }\n\n    return (\n        <CartContext.Provider value={{ cart, addToCart, removeFromCart, increaseAmount, decreaseAmount, amount, total }}>\n            {children}\n        </CartContext.Provider>\n    )\n}\n\nexport default CartProvider;\n\n\n\n// import { createContext, useState, useEffect } from \"react\";\n\n// export const CartContext = createContext();\n\n// const CartProvider = (props) => {\n\n\n//     useEffect(() => {\n//         const total = cart.reduce((accumulator, currentItem) => {\n//             return accumulator + currentItem.new_price * currentItem.amount\n//         }, 0);\n//         setTotal(total);\n//     });\n\n//     const [total, setTotal] = useState(0);\n//     const getDefaultCart = () => {\n//         let cart = {};\n//         for (let i = 0; i < 300; i++) {\n//           cart[i] = 0;\n//         }\n//         return cart;\n//       };\n\n//     const [cartItems, setCartItems] = useState(getDefaultCart());\n\n//     const addToCart = (itemId) => {\n//         setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] + 1 }));\n//         if(localStorage.getItem(\"auth-token\"))\n//         {\n//         fetch('http://localhost:4000/addtocart', {\n//         method: 'POST',\n//         headers: {\n//             Accept:'application/form-data',\n//             'auth-token':`${localStorage.getItem(\"auth-token\")}`,\n//             'Content-Type':'application/json',\n//         },\n//         body: JSON.stringify({\"itemId\":itemId}),\n//         })\n//         .then((resp) => resp.json())\n//         .then((data) => {console.log(data)});\n//         }\n//     };\n\n//     const removeFromCart = (itemId) => {\n//         setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] - 1 }));\n//     }\n\n//     const getTotalCartItems = () => {\n//     let totalItem = 0;\n//     for (const item in cartItems) {\n//         if (cartItems[item] > 0) {\n//         totalItem += cartItems[item];;\n//         }\n//     }\n//     return totalItem;\n//     };\n\n//     const contextValue = {getTotalCartItems, cartItems, addToCart, removeFromCart, total };\n//     return (\n//       <CartContext.Provider value={contextValue}>\n//         {props.children}\n//       </CartContext.Provider>\n//     );\n// }\n\n// export default CartProvider;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}