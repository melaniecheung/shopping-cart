{"ast":null,"code":"// import { createContext, useState, useEffect } from \"react\";\n\n// export const CartContext = createContext();\n\n// const CartProvider = ({ children }) => {\n//     const [cart, setCart] = useState([]);\n//     const [amount, setAmount] = useState(0);\n//     const [total, setTotal] = useState(0);\n\n//     useEffect(() => {\n//         const total = cart.reduce((accumulator, currentItem) => {\n//             return accumulator + currentItem.new_price * currentItem.amount\n//         }, 0);\n//         setTotal(total);\n//     });\n\n//     useEffect(() => {\n//         if (cart) {\n//             const cartAmount = cart.reduce((accumulator, currentItem) => {\n//                 return accumulator + currentItem.amount;\n//             }, 0);\n//             setAmount(cartAmount);\n//         }\n//     }, [cart]);\n\n//     const addToCart = (product, id) => {\n//         const newItem = { ... product, amount: 1 };\n//         const cartItem = cart.find(item => {\n//             return item.id === id;\n//         });\n//         if (cartItem) {\n//             const newCart = [...cart].map(item => {\n//                 if (item.id === id) {\n//                     return {...item, amount: cartItem.amount + 1};\n//                 } else {\n//                     return item;\n//                 }\n//             });\n//             setCart(newCart);\n//         } else {\n//             setCart([...cart, newItem]);\n//         }\n//     };\n\n//     const removeFromCart = (id) => {\n//         const newCart = cart.filter(item => {\n//             return item.id !== id;\n//         });\n//         setCart(newCart);\n//     };\n\n//     const increaseAmount = (id) => {\n//         const cartItem = cart.find(item => item.id === id);\n//         addToCart(cartItem, id);\n//     }\n\n//     const decreaseAmount = (id) => {\n//         const cartItem = cart.find((item) => {\n//             return item.id === id;\n//         });\n//         if (cartItem) {\n//             const newCart = cart.map(item => {\n//                 if (item.id === id) {\n//                     return {...item, amount: cartItem.amount - 1 };\n//                 } else {\n//                     return item;\n//                 }\n//             });\n//             setCart(newCart);\n//         } if (cartItem.amount < 2) {\n//             removeFromCart(id);\n//         }\n//     }\n\n//     return (\n//         <CartContext.Provider value={{ cart, addToCart, removeFromCart, increaseAmount, decreaseAmount, amount, total }}>\n//             {children}\n//         </CartContext.Provider>\n//     )\n// }\n\n// export default CartProvider;","map":{"version":3,"names":[],"sources":["/Users/melaniecheung/Desktop/shopping-cart/frontend/src/components/CartContext.jsx"],"sourcesContent":["// import { createContext, useState, useEffect } from \"react\";\n\n// export const CartContext = createContext();\n\n// const CartProvider = ({ children }) => {\n//     const [cart, setCart] = useState([]);\n//     const [amount, setAmount] = useState(0);\n//     const [total, setTotal] = useState(0);\n\n//     useEffect(() => {\n//         const total = cart.reduce((accumulator, currentItem) => {\n//             return accumulator + currentItem.new_price * currentItem.amount\n//         }, 0);\n//         setTotal(total);\n//     });\n\n//     useEffect(() => {\n//         if (cart) {\n//             const cartAmount = cart.reduce((accumulator, currentItem) => {\n//                 return accumulator + currentItem.amount;\n//             }, 0);\n//             setAmount(cartAmount);\n//         }\n//     }, [cart]);\n\n//     const addToCart = (product, id) => {\n//         const newItem = { ... product, amount: 1 };\n//         const cartItem = cart.find(item => {\n//             return item.id === id;\n//         });\n//         if (cartItem) {\n//             const newCart = [...cart].map(item => {\n//                 if (item.id === id) {\n//                     return {...item, amount: cartItem.amount + 1};\n//                 } else {\n//                     return item;\n//                 }\n//             });\n//             setCart(newCart);\n//         } else {\n//             setCart([...cart, newItem]);\n//         }\n//     };\n\n//     const removeFromCart = (id) => {\n//         const newCart = cart.filter(item => {\n//             return item.id !== id;\n//         });\n//         setCart(newCart);\n//     };\n\n//     const increaseAmount = (id) => {\n//         const cartItem = cart.find(item => item.id === id);\n//         addToCart(cartItem, id);\n//     }\n    \n//     const decreaseAmount = (id) => {\n//         const cartItem = cart.find((item) => {\n//             return item.id === id;\n//         });\n//         if (cartItem) {\n//             const newCart = cart.map(item => {\n//                 if (item.id === id) {\n//                     return {...item, amount: cartItem.amount - 1 };\n//                 } else {\n//                     return item;\n//                 }\n//             });\n//             setCart(newCart);\n//         } if (cartItem.amount < 2) {\n//             removeFromCart(id);\n//         }\n//     }\n\n//     return (\n//         <CartContext.Provider value={{ cart, addToCart, removeFromCart, increaseAmount, decreaseAmount, amount, total }}>\n//             {children}\n//         </CartContext.Provider>\n//     )\n// }\n\n// export default CartProvider;"],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}