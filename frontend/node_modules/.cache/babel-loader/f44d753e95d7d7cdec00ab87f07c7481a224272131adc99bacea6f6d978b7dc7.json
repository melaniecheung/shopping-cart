{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nexport const CartContext = /*#__PURE__*/createContext();\nconst CartProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [cart, setCart] = useState([]);\n  const getDefaultCart = () => {\n    return Object.fromEntries(Array.from({\n      length: 300\n    }, (_, i) => [i, 0]));\n  };\n\n  // const [cart, setCart] = useState([]);\n  // const [amount, setAmount] = useState(0);\n  // const [total, setTotal] = useState(0);\n  // const getDefaultCart = () => {\n  //     let cart = {};\n  //     for (let i = 0; i < 300; i++) {\n  //       cart[i] = 0;\n  //     }\n  //     return cart;\n  //   };\n  // const [cartItems, setCartItems] = useState(getDefaultCart());\n\n  // useEffect(() => {\n  //     const total = cart.reduce((accumulator, currentItem) => {\n  //         return accumulator + currentItem.new_price * currentItem.amount\n  //     }, 0);\n  //     setTotal(total);\n  // });\n\n  // useEffect(() => {\n  //     if (cart) {\n  //         const cartAmount = cart.reduce((accumulator, currentItem) => {\n  //             return accumulator + currentItem.amount;\n  //         }, 0);\n  //         setAmount(cartAmount);\n  //     }\n  // }, [cart]);\n\n  // const addToCart = (product, id) => {\n  //     const newItem = { ... product, amount: 1 };\n  //     const cartItem = cart.find(item => {\n  //         return item.id === id;\n  //     });\n  //     if (cartItem) {\n  //         const newCart = [...cart].map(item => {\n  //             if (item.id === id) {\n  //                 return {...item, amount: cartItem.amount + 1};\n  //             } else {\n  //                 return item;\n  //             }\n  //         });\n  //         setCart(newCart);\n  //     } else {\n  //         setCart([...cart, newItem]);\n  //     }\n  // };\n\n  // const removeFromCart = (id) => {\n  //     const newCart = cart.filter(item => {\n  //         return item.id !== id;\n  //     });\n  //     setCart(newCart);\n  // };\n\n  // const increaseAmount = (id) => {\n  //     const cartItem = cart.find(item => item.id === id);\n  //     addToCart(cartItem, id);\n  // }\n\n  // const decreaseAmount = (id) => {\n  //     const cartItem = cart.find((item) => {\n  //         return item.id === id;\n  //     });\n  //     if (cartItem) {\n  //         const newCart = cart.map(item => {\n  //             if (item.id === id) {\n  //                 return {...item, amount: cartItem.amount - 1 };\n  //             } else {\n  //                 return item;\n  //             }\n  //         });\n  //         setCart(newCart);\n  //     } if (cartItem.amount < 2) {\n  //         removeFromCart(id);\n  //     }\n  // }\n\n  // return (\n  //     <CartContext.Provider value={{ cart, addToCart, removeFromCart, increaseAmount, decreaseAmount, amount, total }}>\n  //         {children}\n  //     </CartContext.Provider>\n  // )\n};\n_s(CartProvider, \"ZqFaEIYkzI5UoYUmTgmqHbYYm/0=\");\n_c = CartProvider;\nexport default CartProvider;\n\n// import { createContext, useState, useEffect } from \"react\";\n\n// export const CartContext = createContext();\n\n// const CartProvider = (props) => {\n\n//     useEffect(() => {\n//         const total = cart.reduce((accumulator, currentItem) => {\n//             return accumulator + currentItem.new_price * currentItem.amount\n//         }, 0);\n//         setTotal(total);\n//     });\n\n//     const [total, setTotal] = useState(0);\n//     const getDefaultCart = () => {\n//         let cart = {};\n//         for (let i = 0; i < 300; i++) {\n//           cart[i] = 0;\n//         }\n//         return cart;\n//       };\n\n//     const [cartItems, setCartItems] = useState(getDefaultCart());\n\n//     const addToCart = (itemId) => {\n//         setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] + 1 }));\n//         if(localStorage.getItem(\"auth-token\"))\n//         {\n//         fetch('http://localhost:4000/addtocart', {\n//         method: 'POST',\n//         headers: {\n//             Accept:'application/form-data',\n//             'auth-token':`${localStorage.getItem(\"auth-token\")}`,\n//             'Content-Type':'application/json',\n//         },\n//         body: JSON.stringify({\"itemId\":itemId}),\n//         })\n//         .then((resp) => resp.json())\n//         .then((data) => {console.log(data)});\n//         }\n//     };\n\n//     const removeFromCart = (itemId) => {\n//         setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] - 1 }));\n//     }\n\n//     const getTotalCartItems = () => {\n//     let totalItem = 0;\n//     for (const item in cartItems) {\n//         if (cartItems[item] > 0) {\n//         totalItem += cartItems[item];;\n//         }\n//     }\n//     return totalItem;\n//     };\n\n//     const contextValue = {getTotalCartItems, cartItems, addToCart, removeFromCart, total };\n//     return (\n//       <CartContext.Provider value={contextValue}>\n//         {props.children}\n//       </CartContext.Provider>\n//     );\n// }\n\n// export default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","CartContext","CartProvider","_ref","_s","children","cart","setCart","getDefaultCart","Object","fromEntries","Array","from","length","_","i","_c","$RefreshReg$"],"sources":["/Users/melaniecheung/Desktop/shopping-cart/frontend/src/components/CartContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\n\nexport const CartContext = createContext();\n\nconst CartProvider = ({ children }) => {\n    const [cart, setCart] = useState([]);\n\n    const getDefaultCart = () => {\n        return Object.fromEntries(Array.from({ length: 300 }, (_, i) => [i, 0]));\n    };\n\n\n\n    // const [cart, setCart] = useState([]);\n    // const [amount, setAmount] = useState(0);\n    // const [total, setTotal] = useState(0);\n    // const getDefaultCart = () => {\n    //     let cart = {};\n    //     for (let i = 0; i < 300; i++) {\n    //       cart[i] = 0;\n    //     }\n    //     return cart;\n    //   };\n    // const [cartItems, setCartItems] = useState(getDefaultCart());\n\n    // useEffect(() => {\n    //     const total = cart.reduce((accumulator, currentItem) => {\n    //         return accumulator + currentItem.new_price * currentItem.amount\n    //     }, 0);\n    //     setTotal(total);\n    // });\n\n    // useEffect(() => {\n    //     if (cart) {\n    //         const cartAmount = cart.reduce((accumulator, currentItem) => {\n    //             return accumulator + currentItem.amount;\n    //         }, 0);\n    //         setAmount(cartAmount);\n    //     }\n    // }, [cart]);\n\n    // const addToCart = (product, id) => {\n    //     const newItem = { ... product, amount: 1 };\n    //     const cartItem = cart.find(item => {\n    //         return item.id === id;\n    //     });\n    //     if (cartItem) {\n    //         const newCart = [...cart].map(item => {\n    //             if (item.id === id) {\n    //                 return {...item, amount: cartItem.amount + 1};\n    //             } else {\n    //                 return item;\n    //             }\n    //         });\n    //         setCart(newCart);\n    //     } else {\n    //         setCart([...cart, newItem]);\n    //     }\n    // };\n\n    // const removeFromCart = (id) => {\n    //     const newCart = cart.filter(item => {\n    //         return item.id !== id;\n    //     });\n    //     setCart(newCart);\n    // };\n\n    // const increaseAmount = (id) => {\n    //     const cartItem = cart.find(item => item.id === id);\n    //     addToCart(cartItem, id);\n    // }\n    \n    // const decreaseAmount = (id) => {\n    //     const cartItem = cart.find((item) => {\n    //         return item.id === id;\n    //     });\n    //     if (cartItem) {\n    //         const newCart = cart.map(item => {\n    //             if (item.id === id) {\n    //                 return {...item, amount: cartItem.amount - 1 };\n    //             } else {\n    //                 return item;\n    //             }\n    //         });\n    //         setCart(newCart);\n    //     } if (cartItem.amount < 2) {\n    //         removeFromCart(id);\n    //     }\n    // }\n\n    // return (\n    //     <CartContext.Provider value={{ cart, addToCart, removeFromCart, increaseAmount, decreaseAmount, amount, total }}>\n    //         {children}\n    //     </CartContext.Provider>\n    // )\n}\n\nexport default CartProvider;\n\n\n\n// import { createContext, useState, useEffect } from \"react\";\n\n// export const CartContext = createContext();\n\n// const CartProvider = (props) => {\n\n\n//     useEffect(() => {\n//         const total = cart.reduce((accumulator, currentItem) => {\n//             return accumulator + currentItem.new_price * currentItem.amount\n//         }, 0);\n//         setTotal(total);\n//     });\n\n//     const [total, setTotal] = useState(0);\n//     const getDefaultCart = () => {\n//         let cart = {};\n//         for (let i = 0; i < 300; i++) {\n//           cart[i] = 0;\n//         }\n//         return cart;\n//       };\n\n//     const [cartItems, setCartItems] = useState(getDefaultCart());\n\n//     const addToCart = (itemId) => {\n//         setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] + 1 }));\n//         if(localStorage.getItem(\"auth-token\"))\n//         {\n//         fetch('http://localhost:4000/addtocart', {\n//         method: 'POST',\n//         headers: {\n//             Accept:'application/form-data',\n//             'auth-token':`${localStorage.getItem(\"auth-token\")}`,\n//             'Content-Type':'application/json',\n//         },\n//         body: JSON.stringify({\"itemId\":itemId}),\n//         })\n//         .then((resp) => resp.json())\n//         .then((data) => {console.log(data)});\n//         }\n//     };\n\n//     const removeFromCart = (itemId) => {\n//         setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] - 1 }));\n//     }\n\n//     const getTotalCartItems = () => {\n//     let totalItem = 0;\n//     for (const item in cartItems) {\n//         if (cartItems[item] > 0) {\n//         totalItem += cartItems[item];;\n//         }\n//     }\n//     return totalItem;\n//     };\n\n//     const contextValue = {getTotalCartItems, cartItems, addToCart, removeFromCart, total };\n//     return (\n//       <CartContext.Provider value={contextValue}>\n//         {props.children}\n//       </CartContext.Provider>\n//     );\n// }\n\n// export default CartProvider;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAEjE,OAAO,MAAMC,WAAW,gBAAGH,aAAa,CAAC,CAAC;AAE1C,MAAMI,YAAY,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAC9B,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMS,cAAc,GAAGA,CAAA,KAAM;IACzB,OAAOC,MAAM,CAACC,WAAW,CAACC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAI,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAK,CAACA,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAC5E,CAAC;;EAID;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;AACJ,CAAC;AAAAX,EAAA,CA3FKF,YAAY;AAAAc,EAAA,GAAZd,YAAY;AA6FlB,eAAeA,YAAY;;AAI3B;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}