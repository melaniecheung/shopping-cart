{"ast":null,"code":"var _jsxFileName = \"/Users/melaniecheung/Desktop/shopping-cart/frontend/src/components/CartContext.jsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import { createContext, useState, useEffect } from \"react\";\n\n// export const CartContext = createContext();\n\n// const CartProvider = ({ children }) => {\n//     const [cart, setCart] = useState([]);\n//     const [amount, setAmount] = useState(0);\n//     const [total, setTotal] = useState(0);\n\n//     useEffect(() => {\n//         const total = cart.reduce((accumulator, currentItem) => {\n//             return accumulator + currentItem.new_price * currentItem.amount\n//         }, 0);\n//         setTotal(total);\n//     });\n\n//     useEffect(() => {\n//         if (cart) {\n//             const cartAmount = cart.reduce((accumulator, currentItem) => {\n//                 return accumulator + currentItem.amount;\n//             }, 0);\n//             setAmount(cartAmount);\n//         }\n//     }, [cart]);\n\n//     const addToCart = (product, id) => {\n//         const newItem = { ... product, amount: 1 };\n//         const cartItem = cart.find(item => {\n//             return item.id === id;\n//         });\n//         if (cartItem) {\n//             const newCart = [...cart].map(item => {\n//                 if (item.id === id) {\n//                     return {...item, amount: cartItem.amount + 1};\n//                 } else {\n//                     return item;\n//                 }\n//             });\n//             setCart(newCart);\n//         } else {\n//             setCart([...cart, newItem]);\n//         }\n//     };\n\n//     const removeFromCart = (id) => {\n//         const newCart = cart.filter(item => {\n//             return item.id !== id;\n//         });\n//         setCart(newCart);\n//     };\n\n//     const increaseAmount = (id) => {\n//         const cartItem = cart.find(item => item.id === id);\n//         addToCart(cartItem, id);\n//     }\n\n//     const decreaseAmount = (id) => {\n//         const cartItem = cart.find((item) => {\n//             return item.id === id;\n//         });\n//         if (cartItem) {\n//             const newCart = cart.map(item => {\n//                 if (item.id === id) {\n//                     return {...item, amount: cartItem.amount - 1 };\n//                 } else {\n//                     return item;\n//                 }\n//             });\n//             setCart(newCart);\n//         } if (cartItem.amount < 2) {\n//             removeFromCart(id);\n//         }\n//     }\n\n//     return (\n//         <CartContext.Provider value={{ cart, addToCart, removeFromCart, increaseAmount, decreaseAmount, amount, total }}>\n//             {children}\n//         </CartContext.Provider>\n//     )\n// }\n\n// export default CartProvider;\n\nexport const CartContext = createContext();\nconst CartProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [cart, setCart] = useState([]);\n  const [amount, setAmount] = useState(0);\n  const [total, setTotal] = useState(0);\n  useEffect(() => {\n    const total = cart.reduce((accumulator, currentItem) => {\n      return accumulator + currentItem.new_price * currentItem.amount;\n    }, 0);\n    setTotal(total);\n  }, [cart]);\n  useEffect(() => {\n    if (cart) {\n      const cartAmount = cart.reduce((accumulator, currentItem) => {\n        return accumulator + currentItem.amount;\n      }, 0);\n      setAmount(cartAmount);\n    }\n  }, [cart]);\n  const addToCart = (product, id) => {\n    const newItem = {\n      ...product,\n      amount: 1\n    };\n\n    // Make a POST request to the /addtocart endpoint with the newItem data\n    fetch('/addtocart', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        product: newItem\n      })\n    }).then(response => {\n      if (response.status === 200) {\n        // Product added to cart successfully, update the client-side cart\n        setCart([...cart, newItem]);\n      } else {\n        // Handle error cases if necessary\n        console.error('Failed to add product to cart');\n      }\n    }).catch(error => {\n      // Handle network errors\n      console.error('Network error:', error);\n    });\n  };\n  const removeFromCart = id => {\n    const newCart = cart.filter(item => {\n      return item.id !== id;\n    });\n    setCart(newCart);\n  };\n  const increaseAmount = id => {\n    const cartItem = cart.find(item => item.id === id);\n    addToCart(cartItem, id);\n  };\n  const decreaseAmount = id => {\n    const cartItem = cart.find(item => item.id === id);\n    if (cartItem) {\n      const newCart = cart.map(item => {\n        if (item.id === id) {\n          return {\n            ...item,\n            amount: cartItem.amount - 1\n          };\n        } else {\n          return item;\n        }\n      });\n      setCart(newCart);\n    }\n    if (cartItem && cartItem.amount <= 1) {\n      removeFromCart(id);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addToCart,\n      removeFromCart,\n      increaseAmount,\n      decreaseAmount,\n      amount,\n      total\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 9\n  }, this);\n};\n_s(CartProvider, \"mFZFjSRtmLVb18GUQ+3dORROan0=\");\n_c = CartProvider;\nexport default CartProvider;\n\n// import { createContext, useState, useEffect } from \"react\";\n\n// export const CartContext = createContext();\n\n// const CartProvider = (props) => {\n\n//     useEffect(() => {\n//         const total = cart.reduce((accumulator, currentItem) => {\n//             return accumulator + currentItem.new_price * currentItem.amount\n//         }, 0);\n//         setTotal(total);\n//     });\n\n//     const [total, setTotal] = useState(0);\n//     const getDefaultCart = () => {\n//         let cart = {};\n//         for (let i = 0; i < 300; i++) {\n//           cart[i] = 0;\n//         }\n//         return cart;\n//       };\n\n//     const [cartItems, setCartItems] = useState(getDefaultCart());\n\n//     const addToCart = (itemId) => {\n//         setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] + 1 }));\n//         if(localStorage.getItem(\"auth-token\"))\n//         {\n//         fetch('http://localhost:4000/addtocart', {\n//         method: 'POST',\n//         headers: {\n//             Accept:'application/form-data',\n//             'auth-token':`${localStorage.getItem(\"auth-token\")}`,\n//             'Content-Type':'application/json',\n//         },\n//         body: JSON.stringify({\"itemId\":itemId}),\n//         })\n//         .then((resp) => resp.json())\n//         .then((data) => {console.log(data)});\n//         }\n//     };\n\n//     const removeFromCart = (itemId) => {\n//         setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] - 1 }));\n//     }\n\n//     const getTotalCartItems = () => {\n//     let totalItem = 0;\n//     for (const item in cartItems) {\n//         if (cartItems[item] > 0) {\n//         totalItem += cartItems[item];;\n//         }\n//     }\n//     return totalItem;\n//     };\n\n//     const contextValue = {getTotalCartItems, cartItems, addToCart, removeFromCart, total };\n//     return (\n//       <CartContext.Provider value={contextValue}>\n//         {props.children}\n//       </CartContext.Provider>\n//     );\n// }\n\n// export default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["CartContext","createContext","CartProvider","_ref","_s","children","cart","setCart","useState","amount","setAmount","total","setTotal","useEffect","reduce","accumulator","currentItem","new_price","cartAmount","addToCart","product","id","newItem","fetch","method","headers","body","JSON","stringify","then","response","status","console","error","catch","removeFromCart","newCart","filter","item","increaseAmount","cartItem","find","decreaseAmount","map","_jsxDEV","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/melaniecheung/Desktop/shopping-cart/frontend/src/components/CartContext.jsx"],"sourcesContent":["// import { createContext, useState, useEffect } from \"react\";\n\n// export const CartContext = createContext();\n\n// const CartProvider = ({ children }) => {\n//     const [cart, setCart] = useState([]);\n//     const [amount, setAmount] = useState(0);\n//     const [total, setTotal] = useState(0);\n\n//     useEffect(() => {\n//         const total = cart.reduce((accumulator, currentItem) => {\n//             return accumulator + currentItem.new_price * currentItem.amount\n//         }, 0);\n//         setTotal(total);\n//     });\n\n//     useEffect(() => {\n//         if (cart) {\n//             const cartAmount = cart.reduce((accumulator, currentItem) => {\n//                 return accumulator + currentItem.amount;\n//             }, 0);\n//             setAmount(cartAmount);\n//         }\n//     }, [cart]);\n\n//     const addToCart = (product, id) => {\n//         const newItem = { ... product, amount: 1 };\n//         const cartItem = cart.find(item => {\n//             return item.id === id;\n//         });\n//         if (cartItem) {\n//             const newCart = [...cart].map(item => {\n//                 if (item.id === id) {\n//                     return {...item, amount: cartItem.amount + 1};\n//                 } else {\n//                     return item;\n//                 }\n//             });\n//             setCart(newCart);\n//         } else {\n//             setCart([...cart, newItem]);\n//         }\n//     };\n\n//     const removeFromCart = (id) => {\n//         const newCart = cart.filter(item => {\n//             return item.id !== id;\n//         });\n//         setCart(newCart);\n//     };\n\n//     const increaseAmount = (id) => {\n//         const cartItem = cart.find(item => item.id === id);\n//         addToCart(cartItem, id);\n//     }\n    \n//     const decreaseAmount = (id) => {\n//         const cartItem = cart.find((item) => {\n//             return item.id === id;\n//         });\n//         if (cartItem) {\n//             const newCart = cart.map(item => {\n//                 if (item.id === id) {\n//                     return {...item, amount: cartItem.amount - 1 };\n//                 } else {\n//                     return item;\n//                 }\n//             });\n//             setCart(newCart);\n//         } if (cartItem.amount < 2) {\n//             removeFromCart(id);\n//         }\n//     }\n\n//     return (\n//         <CartContext.Provider value={{ cart, addToCart, removeFromCart, increaseAmount, decreaseAmount, amount, total }}>\n//             {children}\n//         </CartContext.Provider>\n//     )\n// }\n\n// export default CartProvider;\n\nexport const CartContext = createContext();\n\nconst CartProvider = ({ children }) => {\n    const [cart, setCart] = useState([]);\n    const [amount, setAmount] = useState(0);\n    const [total, setTotal] = useState(0);\n\n    useEffect(() => {\n        const total = cart.reduce((accumulator, currentItem) => {\n            return accumulator + currentItem.new_price * currentItem.amount;\n        }, 0);\n        setTotal(total);\n    }, [cart]);\n\n    useEffect(() => {\n        if (cart) {\n            const cartAmount = cart.reduce((accumulator, currentItem) => {\n                return accumulator + currentItem.amount;\n            }, 0);\n            setAmount(cartAmount);\n        }\n    }, [cart]);\n\n    const addToCart = (product, id) => {\n        const newItem = { ...product, amount: 1 };\n\n        // Make a POST request to the /addtocart endpoint with the newItem data\n        fetch('/addtocart', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ product: newItem }),\n        })\n        .then(response => {\n            if (response.status === 200) {\n                // Product added to cart successfully, update the client-side cart\n                setCart([...cart, newItem]);\n            } else {\n                // Handle error cases if necessary\n                console.error('Failed to add product to cart');\n            }\n        })\n        .catch(error => {\n            // Handle network errors\n            console.error('Network error:', error);\n        });\n    };\n\n    const removeFromCart = (id) => {\n        const newCart = cart.filter(item => {\n            return item.id !== id;\n        });\n        setCart(newCart);\n    };\n\n    const increaseAmount = (id) => {\n        const cartItem = cart.find(item => item.id === id);\n        addToCart(cartItem, id);\n    };\n\n    const decreaseAmount = (id) => {\n        const cartItem = cart.find(item => item.id === id);\n        if (cartItem) {\n            const newCart = cart.map(item => {\n                if (item.id === id) {\n                    return { ...item, amount: cartItem.amount - 1 };\n                } else {\n                    return item;\n                }\n            });\n            setCart(newCart);\n        }\n        if (cartItem && cartItem.amount <= 1) {\n            removeFromCart(id);\n        }\n    };\n\n    return (\n        <CartContext.Provider\n            value={{\n                cart,\n                addToCart,\n                removeFromCart,\n                increaseAmount,\n                decreaseAmount,\n                amount,\n                total,\n            }}\n        >\n            {children}\n        </CartContext.Provider>\n    );\n};\n\nexport default CartProvider;\n\n\n\n// import { createContext, useState, useEffect } from \"react\";\n\n// export const CartContext = createContext();\n\n// const CartProvider = (props) => {\n\n\n//     useEffect(() => {\n//         const total = cart.reduce((accumulator, currentItem) => {\n//             return accumulator + currentItem.new_price * currentItem.amount\n//         }, 0);\n//         setTotal(total);\n//     });\n\n//     const [total, setTotal] = useState(0);\n//     const getDefaultCart = () => {\n//         let cart = {};\n//         for (let i = 0; i < 300; i++) {\n//           cart[i] = 0;\n//         }\n//         return cart;\n//       };\n\n//     const [cartItems, setCartItems] = useState(getDefaultCart());\n\n//     const addToCart = (itemId) => {\n//         setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] + 1 }));\n//         if(localStorage.getItem(\"auth-token\"))\n//         {\n//         fetch('http://localhost:4000/addtocart', {\n//         method: 'POST',\n//         headers: {\n//             Accept:'application/form-data',\n//             'auth-token':`${localStorage.getItem(\"auth-token\")}`,\n//             'Content-Type':'application/json',\n//         },\n//         body: JSON.stringify({\"itemId\":itemId}),\n//         })\n//         .then((resp) => resp.json())\n//         .then((data) => {console.log(data)});\n//         }\n//     };\n\n//     const removeFromCart = (itemId) => {\n//         setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] - 1 }));\n//     }\n\n//     const getTotalCartItems = () => {\n//     let totalItem = 0;\n//     for (const item in cartItems) {\n//         if (cartItems[item] > 0) {\n//         totalItem += cartItems[item];;\n//         }\n//     }\n//     return totalItem;\n//     };\n\n//     const contextValue = {getTotalCartItems, cartItems, addToCart, removeFromCart, total };\n//     return (\n//       <CartContext.Provider value={contextValue}>\n//         {props.children}\n//       </CartContext.Provider>\n//     );\n// }\n\n// export default CartProvider;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}