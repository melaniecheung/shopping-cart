{"ast":null,"code":"var _jsxFileName = \"/Users/melaniecheung/Desktop/shopping-cart/frontend/src/components/CartContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nconst CartProvider = _ref => {\n  _s();\n  let {\n    props\n  } = _ref;\n  const [cart, setCart] = useState([]);\n  const getDefaultCart = () => {\n    return Object.fromEntries(Array.from({\n      length: 300\n    }, (_, i) => [i, 0]));\n  };\n  const [cartItems, setCartItems] = useState(getDefaultCart());\n  useEffect(() => {\n    fetch('http://localhost:4000/allproducts').then(res => res.json()).then(data => setCart(data));\n    if (localStorage.getItem(\"auth-token\")) {\n      fetch('http://localhost:4000/getcart', {\n        method: 'POST',\n        headers: {\n          Accept: 'application/form-data',\n          'auth-token': `${localStorage.getItem(\"auth-token\")}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify()\n      }).then(resp => resp.json()).then(data => {\n        setCartItems(data);\n      });\n    }\n  }, []);\n  const getTotalCartAmount = () => {\n    let totalAmount = 0;\n    for (const item in cartItems) {\n      if (cartItems[item] > 0) {\n        let itemInfo = cart.find(product => product.id === Number(item));\n        totalAmount += cartItems[item] * itemInfo.new_price;\n      }\n    }\n    return totalAmount;\n  };\n  const getTotalCartItems = () => {\n    let totalItem = 0;\n    for (const item in cartItems) {\n      if (cartItems[item] > 0) {\n        totalItem += cartItems[item];\n        ;\n      }\n    }\n    return totalItem;\n  };\n  const addToCart = itemId => {\n    setCartItems(prev => ({\n      ...prev,\n      [itemId]: prev[itemId] + 1\n    }));\n    if (localStorage.getItem(\"auth-token\")) {\n      fetch('http://localhost:4000/addtocart', {\n        method: 'POST',\n        headers: {\n          Accept: 'application/form-data',\n          'auth-token': `${localStorage.getItem(\"auth-token\")}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"itemId\": itemId\n        })\n      }).then(resp => resp.json()).then(data => {\n        console.log(data);\n      });\n    }\n  };\n  const removeFromCart = itemId => {\n    setCartItems(prev => ({\n      ...prev,\n      [itemId]: prev[itemId] - 1\n    }));\n    if (localStorage.getItem(\"auth-token\")) {\n      fetch('http://localhost:4000/removefromcart', {\n        method: 'POST',\n        headers: {\n          Accept: 'application/form-data',\n          'auth-token': `${localStorage.getItem(\"auth-token\")}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"itemId\": itemId\n        })\n      }).then(resp => resp.json()).then(data => {\n        console.log(data);\n      });\n    }\n  };\n  const contextValue = {\n    cart,\n    getTotalCartItems,\n    cartItems,\n    addToCart,\n    removeFromCart,\n    getTotalCartAmount\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n_s(CartProvider, \"Juu0H+AzdsRf+B4mUt2bdZKGVkQ=\");\n_c = CartProvider;\nexport default CartProvider;\n// const [cart, setCart] = useState([]);\n// const [amount, setAmount] = useState(0);\n// const [total, setTotal] = useState(0);\n// const getDefaultCart = () => {\n//     let cart = {};\n//     for (let i = 0; i < 300; i++) {\n//       cart[i] = 0;\n//     }\n//     return cart;\n//   };\n// const [cartItems, setCartItems] = useState(getDefaultCart());\n\n// useEffect(() => {\n//     const total = cart.reduce((accumulator, currentItem) => {\n//         return accumulator + currentItem.new_price * currentItem.amount\n//     }, 0);\n//     setTotal(total);\n// });\n\n// useEffect(() => {\n//     if (cart) {\n//         const cartAmount = cart.reduce((accumulator, currentItem) => {\n//             return accumulator + currentItem.amount;\n//         }, 0);\n//         setAmount(cartAmount);\n//     }\n// }, [cart]);\n\n// const addToCart = (product, id) => {\n//     const newItem = { ... product, amount: 1 };\n//     const cartItem = cart.find(item => {\n//         return item.id === id;\n//     });\n//     if (cartItem) {\n//         const newCart = [...cart].map(item => {\n//             if (item.id === id) {\n//                 return {...item, amount: cartItem.amount + 1};\n//             } else {\n//                 return item;\n//             }\n//         });\n//         setCart(newCart);\n//     } else {\n//         setCart([...cart, newItem]);\n//     }\n// };\n\n// const removeFromCart = (id) => {\n//     const newCart = cart.filter(item => {\n//         return item.id !== id;\n//     });\n//     setCart(newCart);\n// };\n\n// const increaseAmount = (id) => {\n//     const cartItem = cart.find(item => item.id === id);\n//     addToCart(cartItem, id);\n// }\n\n// const decreaseAmount = (id) => {\n//     const cartItem = cart.find((item) => {\n//         return item.id === id;\n//     });\n//     if (cartItem) {\n//         const newCart = cart.map(item => {\n//             if (item.id === id) {\n//                 return {...item, amount: cartItem.amount - 1 };\n//             } else {\n//                 return item;\n//             }\n//         });\n//         setCart(newCart);\n//     } if (cartItem.amount < 2) {\n//         removeFromCart(id);\n//     }\n// }\n\n// return (\n//     <CartContext.Provider value={{ cart, addToCart, removeFromCart, increaseAmount, decreaseAmount, amount, total }}>\n//         {children}\n//     </CartContext.Provider>\n// )\n// }\n\n// export default CartProvider;\n\n// import { createContext, useState, useEffect } from \"react\";\n\n// export const CartContext = createContext();\n\n// const CartProvider = (props) => {\n\n//     useEffect(() => {\n//         const total = cart.reduce((accumulator, currentItem) => {\n//             return accumulator + currentItem.new_price * currentItem.amount\n//         }, 0);\n//         setTotal(total);\n//     });\n\n//     const [total, setTotal] = useState(0);\n//     const getDefaultCart = () => {\n//         let cart = {};\n//         for (let i = 0; i < 300; i++) {\n//           cart[i] = 0;\n//         }\n//         return cart;\n//       };\n\n//     const [cartItems, setCartItems] = useState(getDefaultCart());\n\n//     const addToCart = (itemId) => {\n//         setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] + 1 }));\n//         if(localStorage.getItem(\"auth-token\"))\n//         {\n//         fetch('http://localhost:4000/addtocart', {\n//         method: 'POST',\n//         headers: {\n//             Accept:'application/form-data',\n//             'auth-token':`${localStorage.getItem(\"auth-token\")}`,\n//             'Content-Type':'application/json',\n//         },\n//         body: JSON.stringify({\"itemId\":itemId}),\n//         })\n//         .then((resp) => resp.json())\n//         .then((data) => {console.log(data)});\n//         }\n//     };\n\n//     const removeFromCart = (itemId) => {\n//         setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] - 1 }));\n//     }\n\n//     const getTotalCartItems = () => {\n//     let totalItem = 0;\n//     for (const item in cartItems) {\n//         if (cartItems[item] > 0) {\n//         totalItem += cartItems[item];;\n//         }\n//     }\n//     return totalItem;\n//     };\n\n//     const contextValue = {getTotalCartItems, cartItems, addToCart, removeFromCart, total };\n//     return (\n//       <CartContext.Provider value={contextValue}>\n//         {props.children}\n//       </CartContext.Provider>\n//     );\n// }\n\n// export default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","CartProvider","_ref","_s","props","cart","setCart","getDefaultCart","Object","fromEntries","Array","from","length","_","i","cartItems","setCartItems","fetch","then","res","json","data","localStorage","getItem","method","headers","Accept","body","JSON","stringify","resp","getTotalCartAmount","totalAmount","item","itemInfo","find","product","id","Number","new_price","getTotalCartItems","totalItem","addToCart","itemId","prev","console","log","removeFromCart","contextValue","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/melaniecheung/Desktop/shopping-cart/frontend/src/components/CartContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\n\nexport const CartContext = createContext();\n\nconst CartProvider = ({ props }) => {\n    const [cart, setCart] = useState([]);\n    const getDefaultCart = () => {\n        return Object.fromEntries(Array.from({ length: 300 }, (_, i) => [i, 0]));\n    };\n    const [cartItems, setCartItems] = useState(getDefaultCart());\n\n    useEffect(() => {\n        fetch('http://localhost:4000/allproducts') \n              .then((res) => res.json()) \n              .then((data) => setCart(data))\n    \n        if(localStorage.getItem(\"auth-token\"))\n        {\n          fetch('http://localhost:4000/getcart', {\n          method: 'POST',\n          headers: {\n            Accept:'application/form-data',\n            'auth-token':`${localStorage.getItem(\"auth-token\")}`,\n            'Content-Type':'application/json',\n          },\n          body: JSON.stringify(),\n        })\n          .then((resp) => resp.json())\n          .then((data) => {setCartItems(data)});\n        }\n\n    }, [])\n  \n    const getTotalCartAmount = () => {\n      let totalAmount = 0;\n      for (const item in cartItems) {\n        if (cartItems[item] > 0) {\n          let itemInfo = cart.find((product) => product.id === Number(item));\n          totalAmount += cartItems[item] * itemInfo.new_price;\n        }\n      }\n      return totalAmount;\n    };\n\n    const getTotalCartItems = () => {\n        let totalItem = 0;\n        for (const item in cartItems) {\n          if (cartItems[item] > 0) {\n            totalItem += cartItems[item];;\n          }\n        }\n        return totalItem;\n      };\n\n    const addToCart = (itemId) => {\n    setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] + 1 }));\n    if(localStorage.getItem(\"auth-token\"))\n    {\n        fetch('http://localhost:4000/addtocart', {\n        method: 'POST',\n        headers: {\n        Accept:'application/form-data',\n        'auth-token':`${localStorage.getItem(\"auth-token\")}`,\n        'Content-Type':'application/json',\n        },\n        body: JSON.stringify({\"itemId\":itemId}),\n    })\n        .then((resp) => resp.json())\n        .then((data) => {console.log(data)});\n    }\n    };\n    \n      const removeFromCart = (itemId) => {\n        setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] - 1 }));\n        if(localStorage.getItem(\"auth-token\"))\n        {\n          fetch('http://localhost:4000/removefromcart', {\n          method: 'POST',\n          headers: {\n            Accept:'application/form-data',\n            'auth-token':`${localStorage.getItem(\"auth-token\")}`,\n            'Content-Type':'application/json',\n          },\n          body: JSON.stringify({\"itemId\":itemId}),\n        })\n          .then((resp) => resp.json())\n          .then((data) => {console.log(data)});\n        }\n      };\n    \n      const contextValue = {cart, getTotalCartItems, cartItems, addToCart, removeFromCart, getTotalCartAmount };\n      return (\n        <CartContext.Provider value={contextValue}>\n          {props.children}\n        </CartContext.Provider>\n      );\n    };\n\n    export default CartProvider;\n    // const [cart, setCart] = useState([]);\n    // const [amount, setAmount] = useState(0);\n    // const [total, setTotal] = useState(0);\n    // const getDefaultCart = () => {\n    //     let cart = {};\n    //     for (let i = 0; i < 300; i++) {\n    //       cart[i] = 0;\n    //     }\n    //     return cart;\n    //   };\n    // const [cartItems, setCartItems] = useState(getDefaultCart());\n\n    // useEffect(() => {\n    //     const total = cart.reduce((accumulator, currentItem) => {\n    //         return accumulator + currentItem.new_price * currentItem.amount\n    //     }, 0);\n    //     setTotal(total);\n    // });\n\n    // useEffect(() => {\n    //     if (cart) {\n    //         const cartAmount = cart.reduce((accumulator, currentItem) => {\n    //             return accumulator + currentItem.amount;\n    //         }, 0);\n    //         setAmount(cartAmount);\n    //     }\n    // }, [cart]);\n\n    // const addToCart = (product, id) => {\n    //     const newItem = { ... product, amount: 1 };\n    //     const cartItem = cart.find(item => {\n    //         return item.id === id;\n    //     });\n    //     if (cartItem) {\n    //         const newCart = [...cart].map(item => {\n    //             if (item.id === id) {\n    //                 return {...item, amount: cartItem.amount + 1};\n    //             } else {\n    //                 return item;\n    //             }\n    //         });\n    //         setCart(newCart);\n    //     } else {\n    //         setCart([...cart, newItem]);\n    //     }\n    // };\n\n    // const removeFromCart = (id) => {\n    //     const newCart = cart.filter(item => {\n    //         return item.id !== id;\n    //     });\n    //     setCart(newCart);\n    // };\n\n    // const increaseAmount = (id) => {\n    //     const cartItem = cart.find(item => item.id === id);\n    //     addToCart(cartItem, id);\n    // }\n    \n    // const decreaseAmount = (id) => {\n    //     const cartItem = cart.find((item) => {\n    //         return item.id === id;\n    //     });\n    //     if (cartItem) {\n    //         const newCart = cart.map(item => {\n    //             if (item.id === id) {\n    //                 return {...item, amount: cartItem.amount - 1 };\n    //             } else {\n    //                 return item;\n    //             }\n    //         });\n    //         setCart(newCart);\n    //     } if (cartItem.amount < 2) {\n    //         removeFromCart(id);\n    //     }\n    // }\n\n    // return (\n    //     <CartContext.Provider value={{ cart, addToCart, removeFromCart, increaseAmount, decreaseAmount, amount, total }}>\n    //         {children}\n    //     </CartContext.Provider>\n    // )\n// }\n\n// export default CartProvider;\n\n\n\n// import { createContext, useState, useEffect } from \"react\";\n\n// export const CartContext = createContext();\n\n// const CartProvider = (props) => {\n\n\n//     useEffect(() => {\n//         const total = cart.reduce((accumulator, currentItem) => {\n//             return accumulator + currentItem.new_price * currentItem.amount\n//         }, 0);\n//         setTotal(total);\n//     });\n\n//     const [total, setTotal] = useState(0);\n//     const getDefaultCart = () => {\n//         let cart = {};\n//         for (let i = 0; i < 300; i++) {\n//           cart[i] = 0;\n//         }\n//         return cart;\n//       };\n\n//     const [cartItems, setCartItems] = useState(getDefaultCart());\n\n//     const addToCart = (itemId) => {\n//         setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] + 1 }));\n//         if(localStorage.getItem(\"auth-token\"))\n//         {\n//         fetch('http://localhost:4000/addtocart', {\n//         method: 'POST',\n//         headers: {\n//             Accept:'application/form-data',\n//             'auth-token':`${localStorage.getItem(\"auth-token\")}`,\n//             'Content-Type':'application/json',\n//         },\n//         body: JSON.stringify({\"itemId\":itemId}),\n//         })\n//         .then((resp) => resp.json())\n//         .then((data) => {console.log(data)});\n//         }\n//     };\n\n//     const removeFromCart = (itemId) => {\n//         setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] - 1 }));\n//     }\n\n//     const getTotalCartItems = () => {\n//     let totalItem = 0;\n//     for (const item in cartItems) {\n//         if (cartItems[item] > 0) {\n//         totalItem += cartItems[item];;\n//         }\n//     }\n//     return totalItem;\n//     };\n\n//     const contextValue = {getTotalCartItems, cartItems, addToCart, removeFromCart, total };\n//     return (\n//       <CartContext.Provider value={contextValue}>\n//         {props.children}\n//       </CartContext.Provider>\n//     );\n// }\n\n// export default CartProvider;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}