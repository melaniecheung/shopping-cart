{"ast":null,"code":"/**\n * @remix-run/router v1.6.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      const starParam = params[star];\n      // Apply the splat\n      return starParam;\n    }\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      if (optional === \"?\") {\n        return param == null ? \"\" : param;\n      }\n      if (param == null) {\n        invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n      }\n      return param;\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future = _extends({\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized =\n  // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && (\n  // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey);\n          updateState({\n            blockers: new Map(state.blockers)\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n      loadingNavigation = navigation;\n      // Create a GET request for the loaders\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n    updateState({\n      navigation\n    });\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation = _extends({\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      }, submission);\n      loadingNavigation = navigation;\n    }\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission ? submission || fetcherSubmission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n      formMethod: loadingNavigation.formMethod,\n      formAction: loadingNavigation.formAction,\n      formData: loadingNavigation.formData,\n      formEncType: loadingNavigation.formEncType\n    } : undefined;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    }\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(rf => {\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }));\n      return;\n    }\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true\n      });\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true\n      });\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission, {\n      \" _hasFetcherDoneAnything \": true\n    });\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    );\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = {\n        state: \"idle\",\n        data: actionResult.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher = _extends({\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename);\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      fetchRedirectIds.add(key);\n      await startRedirectNavigation(state, result);\n      return;\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(state, redirect, _temp) {\n    let {\n      submission,\n      replace,\n      isFetchActionRedirect\n    } = _temp === void 0 ? {} : _temp;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location,\n    // TODO: This can be removed once we get rid of useTransition in Remix v2\n    _extends({\n      _isRedirect: true\n    }, isFetchActionRedirect ? {\n      _isFetchActionRedirect: true\n    } : {}));\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n    // Check if this an absolute external redirect that goes to a new origin\n    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, basename) == null;\n      if (routerWindow.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData\n      };\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, submission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        },\n        fetcherSubmission: submission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || (location => location.key);\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, true, isRouteRequest, requestContext);\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      });\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, true, isRouteRequest, requestContext))]);\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getPathContributingMatches(contextualMatches).map(m => m.pathnameBase), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  // Create a Submission on non-GET navigations\n  let submission;\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: normalizeFormMethod ? formMethod.toUpperCase() : formMethod.toLowerCase(),\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path,\n        submission\n      };\n    }\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params\n    }, submission, {\n      actionResult,\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      defaultShouldRevalidate: isRevalidationRequired\n    }));\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n  let resultType;\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([runHandler(handler), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  if (isResponse(result)) {\n    let status = result.status;\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    }\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  }\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n  return searchParams;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename };","map":{"version":3,"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","generatePath","originalPath","prefix","array","isLastSegment","star","starParam","keyMatch","optional","param","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","_","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","emit","settledKey","subscriber","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","future","v7_normalizeFormMethod","v7_prependBasename","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","lazy","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","deleteBlocker","updateState","startNavigation","dispose","clear","deleteFetcher","newState","completeNavigation","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","getSavedScrollPosition","navigate","opts","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","Request","handleLoaders","fetcherSubmission","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","rf","fetcher","revalidatingFetcher","abortPendingFetchRevalidations","f","abortFetcher","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","getFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp","redirectLocation","_isFetchActionRedirect","isDifferentBasename","redirectHistoryAction","currentMatches","fetchersToLoad","all","resolveDeferredResults","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","query","_temp2","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp3","find","values","_result$activeDeferre","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","toUpperCase","stripHashFromPath","searchParams","convertFormDataToSearchParams","append","boundaryId","boundaryMatches","findIndex","currentUrl","nextUrl","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","isStaticRequest","resultType","onReject","runHandler","handler","protocol","isSameBasename","contentType","text","isDeferredData","_result$init","_result$init2","deferred","body","URLSearchParams","File","foundError","newLoaderData","mergedLoaderData","eligibleMatches","reverse","_temp4","errorMessage","obj","signals","isRevalidatingLoader","unwrap","getAll","handle","pathMatches","UNSAFE_DeferredData","UNSAFE_convertRoutesToDataRoutes","UNSAFE_getPathContributingMatches","UNSAFE_invariant","UNSAFE_warning"],"sources":["/Users/melaniecheung/Desktop/shopping-cart/node_modules/@remix-run/router/dist/router.js"],"sourcesContent":["/**\n * @remix-run/router v1.6.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      const starParam = params[star];\n      // Apply the splat\n      return starParam;\n    }\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      if (optional === \"?\") {\n        return param == null ? \"\" : param;\n      }\n      if (param == null) {\n        invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n      }\n      return param;\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future = _extends({\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized =\n  // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && (\n  // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey);\n          updateState({\n            blockers: new Map(state.blockers)\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n      loadingNavigation = navigation;\n      // Create a GET request for the loaders\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n    updateState({\n      navigation\n    });\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation = _extends({\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      }, submission);\n      loadingNavigation = navigation;\n    }\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission ? submission || fetcherSubmission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n      formMethod: loadingNavigation.formMethod,\n      formAction: loadingNavigation.formAction,\n      formData: loadingNavigation.formData,\n      formEncType: loadingNavigation.formEncType\n    } : undefined;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    }\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(rf => {\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }));\n      return;\n    }\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true\n      });\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true\n      });\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission, {\n      \" _hasFetcherDoneAnything \": true\n    });\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    );\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = {\n        state: \"idle\",\n        data: actionResult.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher = _extends({\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename);\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      fetchRedirectIds.add(key);\n      await startRedirectNavigation(state, result);\n      return;\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(state, redirect, _temp) {\n    let {\n      submission,\n      replace,\n      isFetchActionRedirect\n    } = _temp === void 0 ? {} : _temp;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n    _extends({\n      _isRedirect: true\n    }, isFetchActionRedirect ? {\n      _isFetchActionRedirect: true\n    } : {}));\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n    // Check if this an absolute external redirect that goes to a new origin\n    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, basename) == null;\n      if (routerWindow.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData\n      };\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, submission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        },\n        fetcherSubmission: submission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || (location => location.key);\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, true, isRouteRequest, requestContext);\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      });\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, true, isRouteRequest, requestContext))]);\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getPathContributingMatches(contextualMatches).map(m => m.pathnameBase), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  // Create a Submission on non-GET navigations\n  let submission;\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: normalizeFormMethod ? formMethod.toUpperCase() : formMethod.toLowerCase(),\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path,\n        submission\n      };\n    }\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params\n    }, submission, {\n      actionResult,\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      defaultShouldRevalidate: isRevalidationRequired\n    }));\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n  let resultType;\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([runHandler(handler), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  if (isResponse(result)) {\n    let status = result.status;\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    }\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  }\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n  return searchParams;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}